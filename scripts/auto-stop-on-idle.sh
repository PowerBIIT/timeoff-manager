#!/bin/bash
# Automatyczne zatrzymywanie ≈õrodowisk po 30 minutach bezczynno≈õci
# Monitoruje logi Azure App Service i zatrzymuje gdy brak request√≥w
#
# U≈ºycie: ./auto-stop-on-idle.sh
# Cron: */5 * * * * /home/radek/timeoff-manager/scripts/auto-stop-on-idle.sh >> /var/log/idle-monitor.log 2>&1

set -e

# Konfiguracja
DEV_RG="timeoff-manager-rg-dev"
DEV_APP="timeoff-manager-dev"
DEV_DB="timeoff-db-dev"

PROD_RG="timeoff-rg-prod"
PROD_APP="timeoff-manager-20251004"
PROD_DB="timeoff-db-20251004"

# Czas bezczynno≈õci (w minutach)
IDLE_THRESHOLD=30

# Plik do ≈õledzenia ostatniej aktywno≈õci
STATE_DIR="/var/tmp/azure-idle-monitor"
mkdir -p "$STATE_DIR"

DEV_LAST_REQUEST="$STATE_DIR/dev-last-request"
PROD_LAST_REQUEST="$STATE_DIR/prod-last-request"

echo "$(date '+%Y-%m-%d %H:%M:%S') - Checking idle status..."

# Funkcja: sprawd≈∫ ostatni request w logach Azure
check_last_request() {
    local app_name=$1
    local rg_name=$2

    # Pobierz ostatnie 100 linii log√≥w (ostatnie 5 minut)
    local logs=$(az webapp log tail --name "$app_name" --resource-group "$rg_name" --lines 100 2>/dev/null || echo "")

    # Sprawd≈∫ czy sƒÖ jakiekolwiek requesty HTTP (200, 201, 404, etc.)
    if echo "$logs" | grep -qE "HTTP/[0-9\.]+\" [0-9]{3}"; then
        echo "$(date +%s)"
        return 0
    else
        return 1
    fi
}

# Funkcja: zatrzymaj ≈õrodowisko
stop_environment() {
    local env_name=$1
    local app_name=$2
    local db_name=$3
    local rg_name=$4

    echo "  üåô Zatrzymywanie $env_name (brak aktywno≈õci > ${IDLE_THRESHOLD}min)..."

    # Sprawd≈∫ czy app ju≈º jest zatrzymany
    local app_state=$(az webapp show --name "$app_name" --resource-group "$rg_name" --query state -o tsv 2>/dev/null || echo "Unknown")

    if [ "$app_state" != "Stopped" ]; then
        az webapp stop --name "$app_name" --resource-group "$rg_name" 2>/dev/null || echo "    ‚ö†Ô∏è  App already stopped or error"
        echo "    ‚úÖ App zatrzymany"
    else
        echo "    ‚ÑπÔ∏è  App ju≈º zatrzymany"
    fi

    # Sprawd≈∫ czy DB ju≈º jest zatrzymany
    local db_state=$(az postgres flexible-server show --name "$db_name" --resource-group "$rg_name" --query state -o tsv 2>/dev/null || echo "Unknown")

    if [ "$db_state" != "Stopped" ]; then
        az postgres flexible-server stop --name "$db_name" --resource-group "$rg_name" 2>/dev/null || echo "    ‚ö†Ô∏è  DB already stopped or error"
        echo "    ‚úÖ DB zatrzymany"
    else
        echo "    ‚ÑπÔ∏è  DB ju≈º zatrzymany"
    fi

    echo "    üí∞ Oszczƒôdzanie rozpoczƒôte!"
}

# Funkcja: uruchom ≈õrodowisko
start_environment() {
    local env_name=$1
    local app_name=$2
    local db_name=$3
    local rg_name=$4

    echo "  ‚òÄÔ∏è Uruchamianie $env_name (wykryto aktywno≈õƒá)..."

    # Start DB first
    local db_state=$(az postgres flexible-server show --name "$db_name" --resource-group "$rg_name" --query state -o tsv 2>/dev/null || echo "Unknown")

    if [ "$db_state" = "Stopped" ]; then
        echo "    üîÑ Uruchamianie DB..."
        az postgres flexible-server start --name "$db_name" --resource-group "$rg_name" 2>/dev/null || echo "    ‚ö†Ô∏è  DB already running or error"
        sleep 20  # Czekaj na DB
    fi

    # Start App
    local app_state=$(az webapp show --name "$app_name" --resource-group "$rg_name" --query state -o tsv 2>/dev/null || echo "Unknown")

    if [ "$app_state" = "Stopped" ]; then
        echo "    üîÑ Uruchamianie App..."
        az webapp start --name "$app_name" --resource-group "$rg_name" 2>/dev/null || echo "    ‚ö†Ô∏è  App already running or error"
    fi

    echo "    ‚úÖ ≈örodowisko uruchomione!"
}

# Funkcja: sprawd≈∫ bezczynno≈õƒá ≈õrodowiska
check_idle() {
    local env_name=$1
    local app_name=$2
    local db_name=$3
    local rg_name=$4
    local last_request_file=$5

    # Sprawd≈∫ czy app jest uruchomiony
    local app_state=$(az webapp show --name "$app_name" --resource-group "$rg_name" --query state -o tsv 2>/dev/null || echo "Unknown")

    if [ "$app_state" = "Stopped" ]; then
        echo "  $env_name: Zatrzymany (OK)"
        return
    fi

    # App dzia≈Ça - sprawd≈∫ ostatni request
    if check_last_request "$app_name" "$rg_name"; then
        # SƒÖ nowe requesty - zapisz timestamp
        local new_timestamp=$?
        echo "$new_timestamp" > "$last_request_file"
        echo "  $env_name: Aktywny (ostatni request: teraz)"
        return
    fi

    # Brak nowych request√≥w - sprawd≈∫ kiedy by≈Ç ostatni
    if [ -f "$last_request_file" ]; then
        local last_timestamp=$(cat "$last_request_file")
        local now=$(date +%s)
        local idle_minutes=$(( (now - last_timestamp) / 60 ))

        echo "  $env_name: Bezczynny przez ${idle_minutes} minut"

        if [ $idle_minutes -ge $IDLE_THRESHOLD ]; then
            stop_environment "$env_name" "$app_name" "$db_name" "$rg_name"
            # Usu≈Ñ plik - zaczynamy od nowa przy nastƒôpnym starcie
            rm -f "$last_request_file"
        fi
    else
        # Pierwszy check - zapisz aktualny czas
        echo "$(date +%s)" > "$last_request_file"
        echo "  $env_name: Monitoring started"
    fi
}

# === G≈Å√ìWNA LOGIKA ===

echo ""
echo "üîç DEV Environment:"
check_idle "DEV" "$DEV_APP" "$DEV_DB" "$DEV_RG" "$DEV_LAST_REQUEST"

echo ""
echo "üîç PROD Environment:"
check_idle "PROD" "$PROD_APP" "$PROD_DB" "$PROD_RG" "$PROD_LAST_REQUEST"

echo ""
echo "$(date '+%Y-%m-%d %H:%M:%S') - Check complete!"
echo "---"
